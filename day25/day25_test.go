package main

import "testing"

func TestCountConstellations(t *testing.T) {
	tests := []struct{
		points []Point
		expected int
	}{
		{
			[]Point{
				{0,0,0,0},
				{3,0,0,0},
				{0,3,0,0},
				{0,0,3,0},
				{0,0,0,3},
				{0,0,0,6},
				{9,0,0,0},
				{12,0,0,0},
			},
			2,
		},
		{
			[]Point{
				{0,0,0,0},
				{0,0,0,6},
				{3,0,0,0},
				{0,3,0,0},
				{0,0,3,0},
				{0,0,0,3},
				{9,0,0,0},
				{12,0,0,0},
			},
			2,
		},
		{
			[]Point{
				{0,0,0,0},
				{0,0,0,3},
				{3,0,0,0},
				{0,3,0,0},
				{0,0,3,0},
				{6,0,0,0},
				{9,0,0,0},
				{12,0,0,0},
			},
			1,
		},
		{
			[]Point{
				{-1,2,2,0},
				{0,0,2,-2},
				{0,0,0,-2},
				{-1,2,0,0},
				{-2,-2,-2,2},
				{3,0,2,-1},
				{-1,3,2,2},
				{-1,0,-1,0},
				{0,2,1,-2},
				{3,0,0,0},
			},
			4,
		},
		{
			[]Point{
				{1,-1,0,1},
				{2,0,-1,0},
				{3,2,-1,0},
				{0,0,3,1},
				{0,0,-1,-1},
				{2,3,-2,0},
				{-2,2,0,0},
				{2,-2,0,-1},
		    {1,-1,0,-1},
		    {3,2,0,2},
			},
			3,
		},
		{
			[]Point{
				{1,-1,-1,-2},
				{-2,-2,0,1},
				{0,2,1,3},
				{-2,3,-2,1},
				{0,2,3,-2},
				{-1,-1,1,-2},
				{0,-2,-1,0},
				{-2,2,3,-1},
		    {1,2,2,0},
		    {-1,-2,0,-2},
			},
			8,
		},
	}

	for _, test := range tests {
		result := CountConstellations(test.points)
		if result != test.expected {
			t.Errorf("CountConstellations(%v) expected %d, got %d", test.points, test.expected, result)
		}
	}
}
